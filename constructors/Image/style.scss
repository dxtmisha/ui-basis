@import "../../styles/properties";

$designsClassName: 'class' !default;

@mixin initImageDesign($component: 'design.component') {
  @include initDesign($component) {
    @include mixinImage;
    @include mixinImageType;
    @include mixinImageAdaptive;

    @include mixinImageTurn;
    @include mixinImageDisabled;
    @include mixinImageHide;

    @include mixinImageMaterial;
    @include mixinImageLineAwesome;

    @content;
  }
}

@mixin mixinImage {
  direction: ltr;
  @include flexCenter;
  @include absolute;

  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  border-radius: inherit;

  transition-property: background-size, filter, opacity, transform;
  transition-duration: v('d.sys.transition-duration.standard');
  transform: none;
}

@mixin mixinImageType {
  &--type {
    &--public {
      @include backgroundAsColor;
      mask-position: center;
      mask-repeat: no-repeat;
      mask-size: contain;
    }

    &--color,
    &--file,
    &--image {
      @include disabled($designsClassName) {
        filter: grayscale(1) opacity(#{var(--sys-color-opacity, v('??color-opacity'))});
      }
    }
  }
}

@mixin mixinImageAdaptive {
  &--adaptive {
    background-size: 100%;
  }
}

@mixin mixinImageTurn {
  &--turn {
    @include rotate(180deg);
  }
}

@mixin mixinImageDisabled {
  &--disabled {
    color: rgba(var(--sys-color, v('??color')), var(--sys-color-opacity, v('??color-opacity')));
  }
}

@mixin mixinImageHide {
  &--hide {
    opacity: 0;
    scale: .8;
  }
}

@mixin mixinImageMaterial {
  &.material-icons {
    direction: ltr;
    font-size: v('??font-size', 1.5em);
  }

  &--type {
    &--outlined {
      font-family: 'Material Icons Outlined', sans-serif;
    }

    &--round {
      font-family: 'Material Icons Round', sans-serif;
    }

    &--sharp {
      font-family: 'Material Icons Sharp', sans-serif;
    }

    &--two-tone {
      font-family: 'Material Icons Two Tone', sans-serif;
    }
  }
}

@mixin mixinImageLineAwesome {
  &.la,
  &.lab,
  &.lad,
  &.lal,
  &.lar,
  &.las {
    &::before {
      color: inherit;
    }
  }
}
