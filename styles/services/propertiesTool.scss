@use "sass:map";
@use "sass:string";

$designsDesign: 'design' !default;
$designsComponent: 'component' !default;
$designsClassName: 'class' !default;

@import "../rules";

@import "./propertiesItem";

/// Returns the class name
///
/// Возвращает название класса
/// @param {String} $name
/// @return {String}
@function c($name) {
  @return #{'.'}#{__toByName($name)};
}

/// Returns the variable name
///
/// Возвращает название переменной
/// @param {String} $name
/// @return {String}
@function i($name) {
  @return --#{__toByName($name)};
}

/// Returns the variable name
///
/// Возвращает название переменной
/// @param {String} $name
/// @param {String} $default default values / значения по умолчанию
/// @return {String}
@function v($name, $default: null) {
  @if ($default) {
    @return #{var(#{i($name)}, #{$default})}
  } @else {
    @return #{var(#{i($name)})}
  }
}

/// Returns property values by reference
///
/// Возвращает значения свойства по ссылке
/// @param {String} $link
@function l($link) {
  $property: getProperties(__toFullName($link));

  @if ($property != null) {
    $type: map.get($property, 'type');

    @if ($type =='var' or $type =='property') {
      @return string.unquote(map.get($property, 'value'));
    }
  }

  @return 'inherit';
}

/// Transforming a name string, changing it to full format
///
/// Преобразование строки названия, изменяющей ее на полный формат
/// @param {String} $name
/// @return {String}
@function __toFullName($name) {
  @if (string.index($name, '??') == 1) {
    @return #{$designsDesign}#{'.'}#{$designsComponent}#{'.'}#{string.slice($name, 3)};
  } @else if (string.index($name, '?') == 1) {
    @return #{$designsDesign}#{'.'}#{string.slice($name, 2)};
  } @else {
    @return $name;
  }
}

/// Returns a formatted string for the name
///
/// Возвращает отформатированную строку для названия
/// @param {String} $name
/// @return {String}
@function __toByName($name) {
  @return strReplace(__toFullName($name), '.', '-');
}

/// Mixin for generating properties
///
/// Миксин для генерации свойств
/// @param {String} $name Property names / Названия свойств
/// @param {String} $value Property values / Значения свойства
/// @param {Bool} $important High priority / Высокий приоритет
@mixin __toProperty(
  $name,
  $value,
  $important: false
) {
  @if ($important) {
    #{i($name)}: $value !important;
  } @else {
    #{i($name)}: $value;
  }
}

/// Mixin for generating properties
///
/// Миксин для генерации свойств со значения типа var
/// @param {String} $name Property names / Названия свойств
/// @param {String} $value Property values / Значения свойства
/// @param {String} $default default values / значения по умолчанию
/// @param {Bool} $important High priority / Высокий приоритет
@mixin __toPropertyVar(
  $name,
  $value,
  $default: null,
  $important: false
) {
  @include __toProperty($name, v($value, $default), $important);
}
