@use "sass:map";
@use "sass:meta";

$designsProperties: () !default;

@import "../rules";

@import "propertiesClass";
@import "propertiesProperty";
@import "propertiesVar";
@import "propertiesVirtual";

/// Getting a property by its key
///
/// Получение свойства по его ключу
/// @param {list} $index List of keys to traverse / Список ключей для обхода
/// @return {map|null}
@function getProperties($index: null) {
  @if $index == null {
    @return $designsProperties;
  } @else {
    $data: $designsProperties;

    @each $key in strToList($index) {
      @if ($data != null) {
        $data: getMapItem(getMapItem($data, 'value', $data), $key);
      }
    }

    @return $data;
  }
}

/// Getting a list of properties by its key
///
/// Получение списка свойств по его ключу
/// @param {list} $index List of keys to traverse / Список ключей для обхода
/// @return {map|null}
@function getPropertiesValue($index: null) {
  $data: getProperties($index);
  @return getMapItem($data, 'value', $data);
}

@mixin initProperties($properties) {
  @each $index, $property in $properties {
    $name: map-get($property, 'name');
    $type: map-get($property, 'type');
    $value: map-get($property, 'value');

    @if ($type == 'var') {
      @include initVar($property);
    } @else if ($type == 'section') {
      @include initSection($property) {
        @include initProperties($value);
      }
    } @else if ($type == 'virtual') {
      @include initVirtual($property) {
        @include initProperties($value);
      }
    } @else if ($type == 'property') {
      @include initProperty($property);
    }
  }
}

@mixin initClass($property) {
  @if ($property != null) {
    $name: map-get($property, 'name');
    $value: map-get($property, 'value');

    .#{$name} {
      @include initProperties($value);
    }
  }
}
